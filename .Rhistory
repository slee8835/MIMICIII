s_split <- strsplit(s, " ")
for(words in s_split){
print(words)
print(nchar(words))
#short_word <- length(words)
#print(short_word)
}
}
find_short("I like")
## Problem: 4
find_short <- function(s){
short_word <- nchar(s)
s_split <- strsplit(s, " ")
for(word in s_split){
temp_len <- nchar(word)
if(temp_len < short_word){ short_word = temp_len}
}
return(short_word)
}
find_short("I like")
## Problem: 4
find_short <- function(s){
short_word <- nchar(s)
s_split <- strsplit(s, " ")
for(word in s_split){
temp_len <- nchar(word)
print(temp_len)
if(temp_len < short_word){ short_word = temp_len}
}
return(short_word)
}
find_short("I like")
## Problem: 4
find_short <- function(s){
short_word <- nchar(s)
s_split <- strsplit(s, " ")[[1]]
for(word in s_split){
temp_len <- nchar(word)
print(temp_len)
if(temp_len < short_word){ short_word = temp_len}
}
return(short_word)
}
find_short("I like")
## Problem: 4
find_short <- function(s){
short_word <- nchar(s)
s_split <- strsplit(s, " ")[[1]]
for(word in s_split){
temp_len <- nchar(word)
#print(temp_len)
if(temp_len < short_word){ short_word = temp_len}
}
return(short_word)
}
find_short("I like")
find_short("bitcoin take over the world maybe who knows perhaps")
is_pangram <- function(s){
# Your code here
}
find_short("turns out random test cases are easier than writing out basic ones")
find_short("lets talk about javascript the best language")
find_short("i want to travel the world writing code one day")
find_short("Lets all go on holiday somewhere very cold")
## Problem: 5
#A pangram is a sentence that contains every single letter of the alphabet at least once.
#For example, the sentence "The quick brown fox jumps over the lazy dog" is a pangram, because it
#uses the letters A-Z at least once (case is irrelevant). Given a string, detect whether or not it
#is a pangram. Return True if it is, False if not. Ignore numbers and punctuation. Complete the
#function is_pangram in lab2.R script in src folder
is_pangram <- function(s){
alphabet = "abcdefghijklmnopqrstuvwxyz"
s_split <- strsplit(s, "")[[1]]
for(char in s_split){
if(char %%notin%% alphabet){
print("hi")
}
}
}
pangram <- "The quick, brown fox jumps over the lazy dog!"
is_pangram(pangram)
o
## Problem: 5
#A pangram is a sentence that contains every single letter of the alphabet at least once.
#For example, the sentence "The quick brown fox jumps over the lazy dog" is a pangram, because it
#uses the letters A-Z at least once (case is irrelevant). Given a string, detect whether or not it
#is a pangram. Return True if it is, False if not. Ignore numbers and punctuation. Complete the
#function is_pangram in lab2.R script in src folder
is_pangram <- function(s){
alphabet = "abcdefghijklmnopqrstuvwxyz"
s_split <- strsplit(s, "")[[1]]
for(char in s_split){
if(char %notin% alphabet){
print("hi")
}
}
}
pangram <- "The quick, brown fox jumps over the lazy dog!"
is_pangram(pangram)
pangram <- "The quick, brown fox jumps over the lazy dog!"
pangram %notin% "abcdefghijklmnopqrstuvwxyz"
1:10 %in% c(1,3,5,9)
is_pangram <- function(s){
alphabet = "abcdefghijklmnopqrstuvwxyz"
s_split <- strsplit(s, "")[[1]]
for(char in s_split){
if(char %not in% alphabet){
print("hi")
}
}
}
pangram <- "The quick, brown fox jumps over the lazy dog!"
is_pangram(pangram)
## Problem: 5
is_pangram <- function(s){
alphabet = "abcdefghijklmnopqrstuvwxyz"
s_split <- strsplit(s, "")[[1]]
for(char in s_split){
print(char)
}
}
## Problem: 5
is_pangram <- function(s){
alphabet = "abcdefghijklmnopqrstuvwxyz"
s_split <- strsplit(s, "")[[1]]
for(char in s_split){
print(char)
}
}
pangram <- "The quick, brown fox jumps over the lazy dog!"
is_pangram(pangram)
## Problem: 5
is_pangram <- function(s){
s_split <- tolower(strsplit(s, "")[[1]])
is.pangram <- all(letters %in% s_split)
if(is.pangram){return(TRUE)}
else(is.pangram){return(FALSE)}
}
pangram <- "The quick, brown fox jumps over the lazy dog!"
is_pangram(pangram)
## Problem: 5
is_pangram <- function(s){
s_split <- tolower(strsplit(s, "")[[1]])
is.pangram <- all(letters %in% s_split)
if(is.pangram){return(TRUE)}
else(is.pangram){return(FALSE)}
}
## Problem: 5
is_pangram <- function(s){
s_split <- tolower(strsplit(s, "")[[1]])
is.pangram <- all(letters %in% s_split)
if(is.pangram){return(TRUE)}
else{return(FALSE)}
}
pangram <- "The quick, brown fox jumps over the lazy dog!"
is_pangram(pangram)
s2 <- "The quick brown fox jumps over the sluggish dog"
is_pangram(s2)
## Problem: 5
is_pangram <- function(s){
s_split <- tolower(strsplit(s, "")[[1]])
is.pangram <- all(letters in s_split)
if(is.pangram){return(TRUE)}
else{return(FALSE)}
}
letters
## Problem: 5
is_pangram <- function(s){
s_split <- tolower(strsplit(s, "")[[1]])
is.pangram <- all(letters %in% s_split)
if(is.pangram){return(TRUE)}
else{return(FALSE)}
}
pangram <- "The quick, brown fox jumps over the lazy dog!"
s2 <- "The quick brown fox jumps over the sluggish dog"
is_pangram(pangram)
is_pangram(s2)
pangram <- "The quick, rown fox jumps over the lazy dog!"
is_pangram(pangram)
a1 = [1, 2]
a = [121, 144, 19, 161, 19, 144, 19, 11]
a1 = c(1,2)
a1^2
## Problem: 6
#Given two arrays a and b write a function comp(a, b)that checks whether the two arrays have the
#"same" elements, with the same multiplicities. "Same" means, here, that the elements in b are the
#elements in a squared, regardless of the order.
comp <- function(a1, a2){
a_square <- a1^2
is.square <- all(a_square %in% a2)
if(is.squre){return(TRUE)}
else{return(FALSE)}
}
a1 = c(121, 144, 19, 161, 19, 144, 19, 11)
a2 = c(11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19)
comp(a1, a2)
## Problem: 6
#Given two arrays a and b write a function comp(a, b)that checks whether the two arrays have the
#"same" elements, with the same multiplicities. "Same" means, here, that the elements in b are the
#elements in a squared, regardless of the order.
comp <- function(a1, a2){
a_square <- a1^2
is.square <- all(a_square %in% a2)
if(is.square){return(TRUE)}
else{return(FALSE)}
}
a1 = c(121, 144, 19, 161, 19, 144, 19, 11)
a2 = c(11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19)
comp(a1, a2)
comp(a3, a4)
a3 = c(121, 144, 19, 161, 19, 144, 19, 11)
a4 = c(11*21, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19)
comp(a3, a4)
install.packages("UCSCXenaTools")
#install.packages("UCSCXenaTools")
library(UCSCXenaTools)
XenaGenerate(subset = XenaHostNames=="tcgaHub") %>%
XenaFilter(filterDatasets = "clinical") %>%
XenaFilter(filterDatasets = "LUAD|LUSC|LUNG") -> df_todo
df_todo
XenaQuery(df_todo) %>%
XenaDownload() -> xe_download
class(cli)
cli = XenaPrepare(xe_download)
class(cli)
names(cli)
XenaGenerate(subset = XenaHostNames=="tcgaHub") %>%
XenaFilter(filterDatasets = "clinical") %>%
XenaFilter(filterDatasets = "LUAD") -> to_browse
to_browse
XenaGenerate(subset = XenaHostNames=="tcgaHub") %>%
XenaFilter(filterDatasets = "clinical") %>%
XenaFilter(filterDatasets = "LUAD|LUSC") -> to_browse2
to_browse2
XenaBrowse(to_browse)
XenaBrowse(to_browse, type = "cohort")
XenaBrowse(to_browse2, multiple = TRUE)
library(TCGAbiolinks)
listSamples <- c("TCGA-E9-A1NG-11A-52R-A14M-07","TCGA-BH-A1FC-11A-32R-A13Q-07",
"TCGA-A7-A13G-11A-51R-A13Q-07","TCGA-BH-A0DK-11A-13R-A089-07",
"TCGA-E9-A1RH-11A-34R-A169-07","TCGA-BH-A0AU-01A-11R-A12P-07",
"TCGA-C8-A1HJ-01A-11R-A13Q-07","TCGA-A7-A13D-01A-13R-A12P-07",
"TCGA-A2-A0CV-01A-31R-A115-07","TCGA-AQ-A0Y5-01A-11R-A14M-07")
# Query platform Illumina HiSeq with a list of barcode
query <- GDCquery(project = "TCGA-BRCA",
data.category = "Gene expression",
data.type = "Gene expression quantification",
experimental.strategy = "RNA-Seq",
platform = "Illumina HiSeq",
file.type = "results",
barcode = listSamples,
legacy = TRUE)
# Download a list of barcodes with platform IlluminaHiSeq_RNASeqV2
GDCdownload(query)
# Prepare expression matrix with geneID in the rows and samples (barcode) in the columns
# rsem.genes.results as values
BRCARnaseqSE <- GDCprepare(query)
BRCAMatrix <- assay(BRCARnaseqSE,"raw_count") # or BRCAMatrix <- assay(BRCARnaseqSE,"raw_count")
listSamples <- c("TCGA-E9-A1NG-11A-52R-A14M-07","TCGA-BH-A1FC-11A-32R-A13Q-07",
"TCGA-A7-A13G-11A-51R-A13Q-07","TCGA-BH-A0DK-11A-13R-A089-07",
"TCGA-E9-A1RH-11A-34R-A169-07","TCGA-BH-A0AU-01A-11R-A12P-07",
"TCGA-C8-A1HJ-01A-11R-A13Q-07","TCGA-A7-A13D-01A-13R-A12P-07",
"TCGA-A2-A0CV-01A-31R-A115-07","TCGA-AQ-A0Y5-01A-11R-A14M-07")
BRCAMatrix <- assay(BRCARnaseqSE,"raw_count") # or BRCAMatrix <- assay(BRCARnaseqSE,"raw_count")
library(TCGAbiolinks)
library(SummarizedExperiment)
listSamples <- c("TCGA-E9-A1NG-11A-52R-A14M-07","TCGA-BH-A1FC-11A-32R-A13Q-07",
"TCGA-A7-A13G-11A-51R-A13Q-07","TCGA-BH-A0DK-11A-13R-A089-07",
"TCGA-E9-A1RH-11A-34R-A169-07","TCGA-BH-A0AU-01A-11R-A12P-07",
"TCGA-C8-A1HJ-01A-11R-A13Q-07","TCGA-A7-A13D-01A-13R-A12P-07",
"TCGA-A2-A0CV-01A-31R-A115-07","TCGA-AQ-A0Y5-01A-11R-A14M-07")
# Query platform Illumina HiSeq with a list of barcode
query <- GDCquery(project = "TCGA-BRCA",
data.category = "Gene expression",
data.type = "Gene expression quantification",
experimental.strategy = "RNA-Seq",
platform = "Illumina HiSeq",
file.type = "results",
barcode = listSamples,
legacy = TRUE)
# Download a list of barcodes with platform IlluminaHiSeq_RNASeqV2
GDCdownload(query)
# Prepare expression matrix with geneID in the rows and samples (barcode) in the columns
# rsem.genes.results as values
BRCARnaseqSE <- GDCprepare(query)
BRCAMatrix <- assay(BRCARnaseqSE,"raw_count") # or BRCAMatrix <- assay(BRCARnaseqSE,"raw_count")
# For gene expression if you need to see a boxplot correlation and AAIC plot to define outliers you can run
BRCARnaseq_CorOutliers <- TCGAanalyze_Preprocessing(BRCARnaseqSE)
View(BRCARnaseq_CorOutliers)
View(BRCARnaseqSE)
View(BRCARnaseq_CorOutliers)
View(BRCAMatrix)
library("dplyr")
source("http://bioconductor.org/biocLite.R")
library(GenomicRanges)
#install.packages("XML")
#install.packages("rlang")
#biocLite("ShortRead")
#biocLite("DESeq")
library(DESeq)
#biocLite("DESeq2")
library(DESeq2)
#biocLite("rtracklayer")
#biocLite("TCGAbiolinks")
library(TCGAbiolinks)
#https://bioconductor.org/packages/release/bioc/html/TCGAbiolinks.html
#https://www.bioconductor.org/packages/3.3/bioc/vignettes/TCGAbiolinks/inst/doc/tcgaBiolinks.html
citation("TCGAbiolinks")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
library(DESeq)
library(DESeq2)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(MultiAssayExperiment)
#BiocManager::install("ELMER")
library(ELMER)
#BiocManager::install("ELMER.data")
library(ELMER.data)
library(parallel)
#if (!require("DT")) install.packages('DT')
#library(DT)
library(dplyr)
#BiocManager::install("BiocStyle")
library(BiocStyle)
#BiocManager::install("knitr")
#BiocManager::install("GenomicInteractions")
library(GenomicInteractions)
#BiocManager::install("webshot")
library(webshot)
#BiocManager::install("rtracklayer")
library(rtracklayer)
#install.packages("covr")
library(covr)
#BiocManager::install("AnnotationDbi")
library(AnnotationDbi)
#https://bioconductor.org/packages/release/bioc/html/TCGAbiolinks.html
#https://www.bioconductor.org/packages/3.3/bioc/vignettes/TCGAbiolinks/inst/doc/tcgaBiolinks.html
citation("TCGAbiolinks")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
library(DESeq)
library(DESeq2)
library(TCGAbiolinks)
library(SummarizedExperiment)
library(MultiAssayExperiment)
#BiocManager::install("ELMER")
library(ELMER)
#BiocManager::install("ELMER.data")
library(ELMER.data)
library(parallel)
#if (!require("DT")) install.packages('DT')
#library(DT)
library(dplyr)
#BiocManager::install("BiocStyle")
library(BiocStyle)
BiocManager::install("BiocStyle")
library(TCGAbiolinks)
# Survival Analysis SA
clinical_patient_Cancer <- GDCquery_clinic("TCGA-BRCA","clinical")
dataBRCAcomplete <- log2(BRCA_rnaseqv2)
tokenStop<- 1
tabSurvKMcomplete <- NULL
for( i in 1: round(nrow(dataBRCAcomplete)/100)){
message( paste( i, "of ", round(nrow(dataBRCAcomplete)/100)))
tokenStart <- tokenStop
tokenStop <-100*i
tabSurvKM<-TCGAanalyze_SurvivalKM(clinical_patient_Cancer,
dataBRCAcomplete,
Genelist = rownames(dataBRCAcomplete)[tokenStart:tokenStop],
Survresult = F,
ThreshTop=0.67,
ThreshDown=0.33)
tabSurvKMcomplete <- rbind(tabSurvKMcomplete,tabSurvKM)
}
tabSurvKMcomplete <- tabSurvKMcomplete[tabSurvKMcomplete$pvalue < 0.01,]
tabSurvKMcomplete <- tabSurvKMcomplete[order(tabSurvKMcomplete$pvalue, decreasing=F),]
tabSurvKMcompleteDEGs <- tabSurvKMcomplete[
rownames(tabSurvKMcomplete) %in% dataDEGsFiltLevel$mRNA,
]
library (ISLR)
fix(Hitters )
library (ISLR)
fix(Hitters )
Hitters =na.omit(Hitters )
dim(Hitters )
sum(is.na(Hitters ))
library (glmnet )
grid =10^ seq (10,-2, length =100)
ridge.mod =glmnet (x,y,alpha =0, lambda =grid)
library (ISLR)
fix(Hitters)
names(Hitters)
Hitters =na.omit(Hitters )
Hitters =na.omit(Hitters )
set.seed (1)
train=sample (c(TRUE ,FALSE), nrow(Hitters ),rep=TRUE)
test =(! train )
library (glmnet )
grid =10^ seq (10,-2, length =100)
ridge.mod =glmnet (x,y,alpha =0, lambda =grid)
library (ISLR)
fix(Hitters)names(Hitters)
fix(Hitters) names(Hitters)
library (ISLR)
fix(Hitters)
install.packages("ISLR")
install.packages("ISLR")
library (ISLR)
fix(Hitters)
names(Hitters)
Hitters =na.omit(Hitters )
Hitters =na.omit(Hitters )
set.seed (1)
train=sample (c(TRUE ,FALSE), nrow(Hitters ),rep=TRUE)
test =(! train )
library (glmnet )
install.packages("glmnet")
library (glmnet )
grid =10^ seq (10,-2, length =100)
ridge.mod =glmnet (x,y,alpha =0, lambda =grid)
#install.packages("glmnet")
library (glmnet )
grid =10^ seq (10,-2, length =100)
ridge.mod =glmnet (x,y,alpha =0, lambda =grid)
#install.packages("ISLR")
library (ISLR)
fix(Hitters)
names(Hitters)
Hitters =na.omit(Hitters )
Hitters =na.omit(Hitters )
set.seed (1)
train=sample (c(TRUE ,FALSE), nrow(Hitters ),rep=TRUE)
test =(! train )
#install.packages("glmnet")
library (glmnet )
grid =10^ seq (10,-2, length =100)
ridge.mod =glmnet (x,y,alpha =0, lambda =grid)
x=model.matrix (Salary∼.,Hitters )[,-1]
y=Hitters$Salary
#install.packages("glmnet")
library (glmnet )
grid =10^ seq (10,-2, length =100)
ridge.mod =glmnet (x,y,alpha =0, lambda =grid)
View(ridge.mod)
#install.packages("ISLR")
library (ISLR)
fix(Hitters)
names(Hitters)
Hitters =na.omit(Hitters )
Hitters =na.omit(Hitters )
set.seed (1)
train=sample (c(TRUE ,FALSE), nrow(Hitters ),rep=TRUE)
test =(! train )
x = model.matrix (Salary∼.,Hitters )[,-1]
y = Hitters$Salary
#install.packages("glmnet")
library (glmnet )
grid =10^ seq (10,-2, length =100)
ridge.mod =glmnet (x,y,alpha =0, lambda =grid)
#install.packages("ISLR")
library (ISLR)
fix(Hitters)
names(Hitters)
Hitters =na.omit(Hitters )
Hitters =na.omit(Hitters )
set.seed (1)
train=sample (c(TRUE ,FALSE), nrow(Hitters ),rep=TRUE)
test =(! train )
x = model.matrix (Salary ∼.,Hitters )[,-1]
y = Hitters$Salary
#install.packages("glmnet")
library (glmnet )
grid =10^ seq (10,-2, length =100)
ridge.mod =glmnet (x,y,alpha =0, lambda =grid)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MethylMix")
browseVignettes("MethylMix")
solution(100)
solution <- function(number){
x <- seq(1, number-1)
sum(x[x%%3 == 0 | x %% 5 == 0])
}
solution(100)
install.packages(RonFHIR)
install.packages("RonFHIR")
library(RonFHIR)
install.packages("randomForest")
install.packages("readr")
install.packages("forecast")
install.packages("fpp2")
install.packages("TTR")
library(e1071)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(forecast)
library(fpp2)
library(TTR)
library(caret)
library(corrplot)
library(e1071)
install.packages("party")
setwd('C:/USFMSHI/HS 614/MIMIC')
#read in our dataset
heart <- read.csv("data_heartattack_final1.csv", header = T)
